name: CI/CD Pipeline

on:
  push:
  pull_request:

jobs:
  determine_author_email:
    runs-on: ubuntu-latest
    outputs:
      author_email: ${{ steps.get_email.outputs.email }}
    steps:
      - uses: actions/checkout@v4
      - name: Get author email
        id: get_email
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "email=${{ github.event.pusher.email }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && -n "${{ github.event.pull_request.user.email }}" ]]; then
            echo "email=${{ github.event.pull_request.user.email }}" >> $GITHUB_OUTPUT
          else
            git log -1 --pretty=format:'%ae' 2>/dev/null | { read e; [[ -n "$e" ]] && echo "email=$e" || echo "email=default@example.com"; } >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: determine_author_email
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Optional install requirements.txt (if present)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            echo "Sem requirements.txt"
          fi

      # Compatibiliza o import "from C14.library_system ..." usado nos testes
      - name: Prepare package layout for tests
        shell: bash
        run: |
          if [[ -f library_system.py ]]; then
            mkdir -p C14
            cp library_system.py C14/library_system.py
            touch C14/__init__.py
          fi

      - name: Run tests
        shell: bash
        run: |
          python -m unittest discover -s . -p "test_*.py" -v 2>&1 | tee test_results.txt
          test ${PIPESTATUS[0]} -eq 0

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_results.txt

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Optional install requirements.txt (if present)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          fi

      - name: Build package (sdist/wheel)
        shell: bash
        run: |
          if [[ -f setup.py ]]; then
            python -m pip install build wheel setuptools
            python setup.py sdist bdist_wheel || true
          else
            echo "setup.py não encontrado; gerando artefato placeholder"
          fi
          echo "Simulating package build..." > package.txt

      - name: Upload package artifact
        uses: actions/upload-artifact@v4 # <- atualizado!
        with:
          name: python-package
          path: |
            dist/*
            package.txt
          if-no-files-found: warn

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, determine_author_email]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Compute pipeline status
        id: status
        shell: bash
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "val=SUCESSO" >> $GITHUB_OUTPUT
          else
            echo "val=FALHA" >> $GITHUB_OUTPUT
          fi

      - name: Send email notification
        shell: bash
        env:
          EMAIL_RECIPIENT: ${{ needs.determine_author_email.outputs.author_email }}
          PIPELINE_STATUS: ${{ steps.status.outputs.val }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_EMAIL_PASSWORD: ${{ secrets.SENDER_EMAIL_PASSWORD }}
        run: |
          if [[ -f send_email.py ]]; then
            python send_email.py
          elif [[ -f C14/send_email.py ]]; then
            python C14/send_email.py
          else
            echo "send_email.py não encontrado"; exit 1
          fi
