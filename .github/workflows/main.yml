name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  determine_author_email:
    runs-on: ubuntu-latest
    outputs:
      author_email: ${{ steps.get_email.outputs.email }}
    steps:
      - name: Get author email
        id: get_email
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "email=${{ github.event.pusher.email }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "email=${{ github.event.pull_request.user.email }}" >> $GITHUB_OUTPUT
          else
            echo "email=default@example.com" >> $GITHUB_OUTPUT # Fallback
          fi

  test:
    runs-on: ubuntu-latest
    needs: determine_author_email
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        run: python -m unittest test_library_system.py > test_results.txt
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_results.txt # Assuming tests output to this file

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build package
        run: |-
          python setup.py sdist bdist_wheel
          echo "Simulating package build..." > package.txt # Placeholder for actual build step
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: package.txt

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, determine_author_email]
    if: always()
    steps:
      - name: Send email notification
        run: |
          python send_email.py
        env:
          EMAIL_RECIPIENT: ${{ needs.determine_author_email.outputs.author_email }}
          PIPELINE_STATUS: ${{ job.status }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_EMAIL_PASSWORD: ${{ secrets.SENDER_EMAIL_PASSWORD }}
